/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.modules.riceoptions;

import javax.swing.JOptionPane;
import org.openide.util.NbPreferences;

final class RiceOptionsPanel extends javax.swing.JPanel {

    private final RiceOptionsOptionsPanelController controller;

    RiceOptionsPanel(RiceOptionsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSpikeletlength = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldcmInreal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldNodeMinDistance = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jComboBoxMethod = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jComboBoxExecludeNode = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();

        jTextFieldSpikeletlength.setText(org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jTextFieldSpikeletlength.text")); // NOI18N
        jTextFieldSpikeletlength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSpikeletlengthFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel1.text")); // NOI18N

        jTextFieldcmInreal.setText(org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jTextFieldcmInreal.text")); // NOI18N
        jTextFieldcmInreal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldcmInrealActionPerformed(evt);
            }
        });
        jTextFieldcmInreal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldcmInrealFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel8.text")); // NOI18N

        jTextFieldNodeMinDistance.setText(org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jTextFieldNodeMinDistance.text")); // NOI18N
        jTextFieldNodeMinDistance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNodeMinDistanceFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel13.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel14.text")); // NOI18N

        jComboBoxMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Increamental (new)", "Build and Fix (Old)" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel15.text")); // NOI18N

        jComboBoxExecludeNode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Start and End Yellow Circles" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(RiceOptionsPanel.class, "RiceOptionsPanel.jLabel16.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(5, 5, 5)
                                .addComponent(jSeparator3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(5, 5, 5)
                                .addComponent(jSeparator5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldSpikeletlength, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel12))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxExecludeNode, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldNodeMinDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(22, 22, 22)
                                .addComponent(jTextFieldcmInreal, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel13))
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSpikeletlength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldcmInreal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNodeMinDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxExecludeNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSpikeletlengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSpikeletlengthFocusLost
        // TODO add your handling code here:
        if (!isInteger(jTextFieldSpikeletlength.getText())) {
            JOptionPane.showMessageDialog(this, "Spikelet length should be a positive integer number");

            jTextFieldSpikeletlength.requestFocusInWindow();
            return;
        } else {
            if (Integer.parseInt(jTextFieldSpikeletlength.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "Spikelet length should be a positive integer number");
                jTextFieldSpikeletlength.requestFocusInWindow();

            }
        }

    }//GEN-LAST:event_jTextFieldSpikeletlengthFocusLost

    private void jTextFieldcmInrealFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldcmInrealFocusLost
        // TODO add your handling code here:

        if (!isdouble(jTextFieldcmInreal.getText())) {
            JOptionPane.showMessageDialog(null, "1 cm in the real scene shoule be a postive real number");
            jTextFieldcmInreal.requestFocusInWindow();
        } else {
            if (Double.parseDouble(jTextFieldcmInreal.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "1 cm in the real scene shoule be a postive real number");
                jTextFieldcmInreal.requestFocusInWindow();
            }

        }


    }//GEN-LAST:event_jTextFieldcmInrealFocusLost

    private void jTextFieldNodeMinDistanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNodeMinDistanceFocusLost
        // TODO add your handling code here:
        if (!isdouble(jTextFieldNodeMinDistance.getText())) {
            JOptionPane.showMessageDialog(null, "Minimum distance between nodes should be positive");
            jTextFieldNodeMinDistance.requestFocusInWindow();
        } else {
            if (Double.parseDouble(jTextFieldNodeMinDistance.getText()) < 0) {
                JOptionPane.showMessageDialog(this, "Minimum distance between nodes should be positive");
                jTextFieldNodeMinDistance.requestFocusInWindow();
            }

        }
    }//GEN-LAST:event_jTextFieldNodeMinDistanceFocusLost

    private void jTextFieldcmInrealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldcmInrealActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldcmInrealActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(RiceOptionsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(RiceOptionsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        String spikletlength=NbPreferences.forModule(RiceOptionsPanel.class).get("spikletlength", "");
        String cminreal= NbPreferences.forModule(RiceOptionsPanel.class).get("cminreal", "");
        String nodemindistance=NbPreferences.forModule(RiceOptionsPanel.class).get("nodemindistance", "");
        String execuludeNode=NbPreferences.forModule(RiceOptionsPanel.class).get("execludeNode", "");
        String calcmethod=NbPreferences.forModule(RiceOptionsPanel.class).get("calcmethod", "");
        
        
        if("".equals(spikletlength)) 
            jTextFieldSpikeletlength.setText("40");
        else
            jTextFieldSpikeletlength.setText(spikletlength);
        
        if("".equals(cminreal)) 
            jTextFieldcmInreal.setText("1");
        else
            jTextFieldcmInreal.setText(cminreal);
        
        if("".equals(nodemindistance)) 
            jTextFieldNodeMinDistance.setText("10");
        else
            jTextFieldNodeMinDistance.setText(nodemindistance);
        
        if("".equals(execuludeNode)) 
            jComboBoxExecludeNode.setSelectedIndex(0);
        else
           jComboBoxExecludeNode.setSelectedIndex(Integer.parseInt(execuludeNode));
        
        if("".equals(calcmethod)) 
            jComboBoxMethod.setSelectedIndex(0);
        else
        jComboBoxMethod.setSelectedIndex(Integer.parseInt(calcmethod));
    }

    
    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(RiceOptionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(RiceOptionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        if (!isInteger(jTextFieldSpikeletlength.getText())) {
            JOptionPane.showMessageDialog(this, "Spikelet length should be a positive integer number");
            return;
        } else {
            if (Integer.parseInt(jTextFieldSpikeletlength.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "Spikelet length should be a positive integer number");
                return;
            }
        }

        if (!isdouble(jTextFieldcmInreal.getText())) {
            JOptionPane.showMessageDialog(null, "1 cm in the real scene shoule be a postive real number");
            return;
        } else {
            if (Double.parseDouble(jTextFieldcmInreal.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "1 cm in the real scene shoule be a postive real number");
                return;
            }
        }

        if (!isdouble(jTextFieldNodeMinDistance.getText())) {
            JOptionPane.showMessageDialog(null, "Minimum distance between nodes should be positive");
            jTextFieldNodeMinDistance.requestFocusInWindow();
        } else {
            if (Double.parseDouble(jTextFieldNodeMinDistance.getText()) < 0) {
                JOptionPane.showMessageDialog(this, "Minimum distance between nodes should be positive");
                jTextFieldNodeMinDistance.requestFocusInWindow();
            }



        }


        NbPreferences.forModule(RiceOptionsPanel.class).put("spikletlength", jTextFieldSpikeletlength.getText());
        NbPreferences.forModule(RiceOptionsPanel.class).put("cminreal", jTextFieldcmInreal.getText());
        NbPreferences.forModule(RiceOptionsPanel.class).put("nodemindistance", jTextFieldNodeMinDistance.getText());
        NbPreferences.forModule(RiceOptionsPanel.class).put("calcmethod", String.valueOf(jComboBoxMethod.getSelectedIndex()));
        NbPreferences.forModule(RiceOptionsPanel.class).put("execludeNode", String.valueOf(jComboBoxExecludeNode.getSelectedIndex()));
        
    }

    
    boolean valid() {
//        if(!BasicMath.isInteger(jTextFieldSpikeletlength.getText())){
//            JOptionPane.showMessageDialog(this, "An integer number is required.");
//            return false;
//        }
        return true;
    }

    
    //helpers
    public boolean isInteger(String input) {
        try {
            Integer.parseInt(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean isdouble(String input) {
        try {
            Double.parseDouble(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxExecludeNode;
    private javax.swing.JComboBox jComboBoxMethod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField jTextFieldNodeMinDistance;
    private javax.swing.JTextField jTextFieldSpikeletlength;
    private javax.swing.JTextField jTextFieldcmInreal;
    // End of variables declaration//GEN-END:variables
}
